C
C  *INCLUDE UDSRCH
C        WRITE(21,'(''NEWFRAME'')')
C        WRITE(21,'(''SET ORDER X Y'')')
C        DO 10 I = 1, 100
C           X = 0.01*I
C           CALL RSHDIS(X,1,Y)
C           WRITE(21,'(2E15.8)') Y, X
C  10    CONTINUE
C        WRITE(21,'(''JOIN'')')
C        END
C*
C* This version for the latest JLC parameter as of 91/08/22 with
C* the new bremsstrahlung:
C*                   _
C*                  / 1
C*    sig_RC(s) =  /   dz b [ z**(b-1)(1+3b/4) - (1-z/2) ] sig((1-z)s)
C*               _/ 0
C* The beam energy spread is assumed to be flat and has FWHM of 1%.
C*
      SUBROUTINE RSHDIS(X,ITYP,Y)
 
      IMPLICIT   REAL*8 ( A-H, O-Z )
      INTEGER*4  ITYP
      REAL   *4  X, Y
C--
      DATA   SGEB / 0.005D0 /
      PARAMETER  ( MXxDAT = 80 )
      REAL   *8  BMDATA(2,0:MXxDAT)
      DATA ( BMDATA(I,0),I=1,2) /  2*0.D0 /
      DATA ((BMDATA(I,J),I=1,2),J= 1,20) /
     . 0.48533012D-03, 0.29999997D-01, 0.14013960D-02, 0.89999974D-01,
     . 0.27410882D-02, 0.14999998D+00, 0.43961331D-02, 0.20999998D+00,
     . 0.62891133D-02, 0.26999998D+00, 0.84015913D-02, 0.32999998D+00,
     . 0.10780450D-01, 0.38999999D+00, 0.13427798D-01, 0.44999999D+00,
     . 0.16225830D-01, 0.50999999D+00, 0.19191254D-01, 0.56999999D+00,
     . 0.22358447D-01, 0.63000000D+00, 0.25732350D-01, 0.69000000D+00,
     . 0.29397655D-01, 0.75000000D+00, 0.33312336D-01, 0.80999994D+00,
     . 0.37463039D-01, 0.86999995D+00, 0.41908674D-01, 0.92999995D+00,
     . 0.46685379D-01, 0.98999995D+00, 0.51925588D-01, 0.10499992D+01,
     . 0.57683490D-01, 0.11099997D+01, 0.64063907D-01, 0.11699991D+01/
      DATA ((BMDATA(I,J),I=1,2),J=21,40) /
     . 0.70885301D-01, 0.12299995D+01, 0.78603983D-01, 0.12900000D+01,
     . 0.86847246D-01, 0.13499994D+01, 0.95985413D-01, 0.14099998D+01,
     . 0.10572749D+00, 0.14699993D+01, 0.11636990D+00, 0.15299997D+01,
     . 0.12762463D+00, 0.15899992D+01, 0.13964224D+00, 0.16499996D+01,
     . 0.15225458D+00, 0.17099991D+01, 0.16547102D+00, 0.17699995D+01,
     . 0.17949027D+00, 0.18299999D+01, 0.19400734D+00, 0.18899994D+01,
     . 0.20885718D+00, 0.19499998D+01, 0.22422886D+00, 0.20099993D+01,
     . 0.23984379D+00, 0.20699997D+01, 0.25592607D+00, 0.21299992D+01,
     . 0.27234393D+00, 0.21899996D+01, 0.28907108D+00, 0.22500000D+01,
     . 0.30580544D+00, 0.23099995D+01, 0.32284063D+00, 0.23699999D+01/
      DATA ((BMDATA(I,J),I=1,2),J=41,60) /
     . 0.33993906D+00, 0.24299994D+01, 0.35738736D+00, 0.24899998D+01,
     . 0.37492895D+00, 0.25499992D+01, 0.39269620D+00, 0.26099997D+01,
     . 0.41021836D+00, 0.26699991D+01, 0.42779958D+00, 0.27299995D+01,
     . 0.44571197D+00, 0.27900000D+01, 0.46343094D+00, 0.28499994D+01,
     . 0.48133934D+00, 0.29099998D+01, 0.49955809D+00, 0.29699993D+01,
     . 0.50864941D+00, 0.30149994D+01, 0.51793426D+00, 0.30449991D+01,
     . 0.52730852D+00, 0.30749998D+01, 0.53682178D+00, 0.31049995D+01,
     . 0.54647505D+00, 0.31349993D+01, 0.55615050D+00, 0.31650000D+01,
     . 0.56601995D+00, 0.31949997D+01, 0.57604557D+00, 0.32249994D+01,
     . 0.58621657D+00, 0.32549992D+01, 0.59671301D+00, 0.32849998D+01/
      DATA ((BMDATA(I,J),I=1,2),J=61,80) /
     . 0.60739630D+00, 0.33149996D+01, 0.61844319D+00, 0.33449993D+01,
     . 0.63001597D+00, 0.33750000D+01, 0.64215410D+00, 0.34049997D+01,
     . 0.65515637D+00, 0.34349995D+01, 0.66914111D+00, 0.34649992D+01,
     . 0.68475056D+00, 0.34949999D+01, 0.70633167D+00, 0.35249996D+01,
     . 0.73411536D+00, 0.35549994D+01, 0.76717567D+00, 0.35849991D+01,
     . 0.80424398D+00, 0.36149998D+01, 0.84372157D+00, 0.36449995D+01,
     . 0.88391066D+00, 0.36749992D+01, 0.91872776D+00, 0.37049999D+01,
     . 0.94622356D+00, 0.37349997D+01, 0.96707189D+00, 0.37649994D+01,
     . 0.98211193D+00, 0.37949991D+01, 0.99204636D+00, 0.38249998D+01,
     . 0.99772829D+00, 0.38549995D+01, 0.99990815D+00, 0.38849993D+01/
C
C========< Entry Point >================================================
C
C--
C  Decide which bin X belongs to.
C--
      CALL UDSRCH(MXxDAT,2,1,BMDATA(1,1),DBLE(X),IP)
C--
C  Calculate Y.
C     FRAC = MAX(1.E-6,1+5*SGEB-FRAC)
C     FRAC = -LOG(FRAC)
C--
      IF ( IP.NE.0 .AND. IP.NE.MXxDAT ) THEN
         XL  = BMDATA(1,IP)
         DX  = BMDATA(1,IP+1) - XL
         DF  = (BMDATA(2,IP+1)-BMDATA(2,IP))/DX
         VAL = BMDATA(2,IP) + (X-XL)*DF
      ELSE
         VAL = BMDATA(2,IP)
      ENDIF
      Y   = 1 + 5*SGEB - EXP(-VAL)
C--
C  That's it.
C--
      RETURN
      END
